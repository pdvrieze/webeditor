
/*
 * Buildscript based upon https://objectpartners.com/2015/04/29/using-gradle-and-bower-to-manage-jscss-dependencies/
 */

buildscript {
    dependencies {
        classpath 'com.moowork.gradle:gradle-node-plugin:0.12'
    }
    repositories {
        jcenter()
    }
}

apply plugin: 'com.moowork.node'
apply plugin: 'kotlin2js'
apply plugin: 'war'

node {
//    version = '0.12.2'
//    npmVersion = '2.7.5'
//    download = true
}

task npmCacheConfig(type: NpmTask) {
    description = "Configure the NPM cache"
    def npmCacheDir = "${buildDir}/caches/npm"
    outputs.files file(npmCacheDir)
    args = [ 'config', 'set', 'cache', npmCacheDir ]
}

task npmPackages(type: NpmTask, dependsOn: npmCacheConfig) {
    description = "Install Node.js packages"
    args = [ 'install' ]
    inputs.files file('package.json')
    outputs.files file('node_modules')
}

task bowerInstall(type: NodeTask) {
    script = file('node_modules/bower/bin/bower')
    args = ["--config.storage.cache=${buildDir}/caches/bower/cache",
            "--config.storage.packages=${buildDir}/caches/bower/packages",
            "--config.storage.registry=${buildDir}/caches/bower/registry",
            'install']
    inputs.files file('bower.json')
    outputs.files file('bower_components')
    dependsOn npmPackages
}

def outDir = "${buildDir}/kotlin2js/main/"

jar{
    baseName='webeditor'
}

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib-common:$kotlin_version"
    compile "org.jetbrains.kotlin:kotlin-stdlib-js:$kotlin_version"
    compile "org.jetbrains.kotlinx:kotlinx-html-js:$kotlinx_html_version"
    compile project(":jscommon")
}

sourceCompatibility = myJavaVersion
targetCompatibility = myJavaVersion

compileKotlin2Js {
    kotlinOptions.outputFile = outDir + "webeditor.js"
    kotlinOptions.sourceMap = true
    kotlinOptions.suppressWarnings = false
    kotlinOptions.verbose = true
//    kotlinOptions.kjsm = false
    kotlinOptions.moduleKind = "amd"
}

war {
    configurations.runtime.each { File file ->
        logger.lifecycle("Adding javascript dependency "+file.toString())
        into("js") {
            from zipTree(file.absolutePath)
            include { fileTreeElement ->
                def path = fileTreeElement.path
                path.endsWith(".js")&& path.startsWith("META-INF/resources") || !path.startsWith("META-INF/")
            }
            eachFile { fileCopyDetails ->
                def mysrc = fileCopyDetails.sourcePath
                def i = mysrc.lastIndexOf('/')
                if (fileCopyDetails.sourcePath.startsWith("META-INF") && i>0) {
                    def myNewPath = 'js/'+mysrc.substring(i+1)
                    logger.lifecycle("Renaming ${fileCopyDetails.sourcePath} to $myNewPath")
                    fileCopyDetails.path = myNewPath
                }

            }
            exclude { f ->
                def r = f.name.endsWith(".class") || (f.name.endsWith(".kjsm") && f.path.startsWith("kotlinx.html.shared"))
                if (r) logger.info("Skipping inclusion of `${f.relativePath.pathString}` into javascript path")
                return r
            }
        }
    }
    classpath = files() // Reset this so that we have a clean War
    from(compileKotlin2Js.outputs) {
        into 'js'
    }

    from ('bower_components') {
//        exclude '**/*.min.js'
        exclude 'bower_components/jquery/test'
        include '**/*.js'
        include '**/*.min.map'
        include '**/*.css'
        include 'bootstrap/dist/fonts/*'
        include 'jquery/dist/jquery.js'
        includeEmptyDirs = false
        into 'bower_components'
    }
    dependsOn bowerInstall
}
